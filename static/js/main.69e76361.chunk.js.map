{"version":3,"sources":["components/NavigationBar.tsx","components/Slider.tsx","model/util.ts","components/Graph.tsx","components/Main.tsx","components/NodeDetails.tsx","components/Aside.tsx","components/App.tsx","components/AppWrapper.tsx","components/Menu.tsx","components/Router.tsx","serviceWorker.js","index.tsx","resources/icons/all.svg"],"names":["icons","require","NavigationBar","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","id","onClick","history","back","viewBox","className","xlinkHref","concat","props","name","React","Slider","slider","_this2","_this$props","historyLength","currentTime","onCurrentTimeChange","console","log","disabled","enabled","ref","type","min","max","onChange","getSliderValue","current","parseInt","SatVisAssertionError","message","_this","call","Error","assert","condition","length","undefined","styleTemplates","Graph","state","metaPressed","markers","Set","network","networkNodes","DataSet","networkEdges","graphContainer","dragStartEvent","cachedChangeNodesEvent","generateNetwork","updateNetwork","layout","fit","prevProps","Network","nodes","edges","physics","interaction","multiselect","hierarchical","direction","sortMethod","on","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","clickEvent","clickedNodeId","wrap","_context","prev","next","tree","onNodeSelectionChange","stop","_x","onlyUpdateStyles","visLayout","PobVisTree","PobVisLayout","treeCloned","JSON","parse","stringify","currentNodeExprID","nodeSelection","exprID","Array","nodeID","node","event_type","parent","siblings","children","same_as_sibl","identical_sibl","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","sibl","err","return","to_be_vis","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","childID","push","new_children","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","ATree","visNodes","visEdges","edgeId","visNode","toVisNode","visEdge","toVisEdge","clear","add","style","styleData","isMarked","includes","labelHighlightBold","shape","color","border","markedStyle","defaultStyle","background","highlight","highlightStyle","parentNodeId","hidden","arrows","from","to","smooth","ReactModal","setAppElement","Main","Graph_Graph","PobLemmasMap","Slider_Slider","NodeDetails","keep","additional_info","level","lemma_list","lemmas","lemma","ExprMap","pobID","expr","Aside","nodeDetails","refresh_button","mode","title","onPoke","NodeDetails_NodeDetails","SatVisLayout","App","trees","main","_this$state","hL","keys","Main_Main","updateNodeSelection","bind","updateCurrentTime","Aside_Aside","onUpdateNodeSelection","poke","setSatVisLayout","setPobVisLayout","runVampire","problem","spacerUserOptions","setState","fetch","method","headers","Accept","Content-Type","body","fetchedJSON","json","status","nodes_list","buildPobLemmasMap","buildExprMap","errorMessage","_context2","t0","file","spacerState","_context3","Map","lemmaExprID","existPrevLemma","prev_min","Component","AppWrapper","NavigationBar_NavigationBar","src_components_App","hideBracketsAssoc","nonStrictForNegatedStrictInequalities","orientClauses","Menu","_getPrototypeOf2","_len","args","_key","isChromeOrFirefox","navigator","userAgent","indexOf","fileUpload","monacoDiv","monaco","Monaco","create","lineNumbers","roundedSelection","scrollBeyondLastLine","scrollBeyondLastColumn","minimap","renderLineHighlight","hideCursorInOverviewRuler","links","overviewRulerBorder","automaticLayout","lineDecorationsWidth","lineNumbersMinChars","wordWrap","setValue","getModel","onDidChangeContent","onChangeProblem","getValue","problemName","chooseFile","uploadEncoding","htmlFor","changeSpacerUserOptions","react_router_dom","click","event","_this3","target","files","reader","FileReader","onloadend","text","result","onChangeProblemName","endsWith","onChangeInputSyntax","readAsText","newValue","onChangeSpacerUserOptions","checked","onChangeHideBracketsAssoc","onChangeNonStrictForNegatedStrictInequalities","onChangeOrientClauses","AppRouter","inputSyntax","react_router","path","exact","render","Menu_Menu","changeProblem","changeProblemName","changeInputSyntax","changeHideBracketsAssoc","changeNonStrictForNegatedStrictInequalities","changeOrientClauses","appComponent","AppWrapper_AppWrapper","Boolean","window","location","hostname","match","ReactDOM","Router_AppRouter","document","getElementById","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.69e76361.chunk.js","sourcesContent":["import * as React from 'react';\nimport './NavigationBar.css';\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  name: string\n}\n\nexport class NavigationBar extends React.Component<Props, {}> {\n\n  render() {\n    return (\n      <nav id=\"navigationBar\">\n        <button onClick={() => history.back()}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#nav-back`}/>\n          </svg>\n\t\t\t\t\t<span>Back</span>\n        </button>\n        <small>{this.props.name}</small>\n        <div className=\"hidden\"></div>\n      </nav>\n    )\n  }\n}","import * as React from 'react';\n\nimport './Slider.css';\n\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  historyLength: number,\n  currentTime: number,\n  onCurrentTimeChange: (newState: number) => void,\n  enabled: boolean\n};\nexport default class Slider extends React.Component<Props, {}> {\n\n  private slider = React.createRef<HTMLInputElement>();\n\n  render() {\n    const {historyLength, currentTime, onCurrentTimeChange} = this.props;\n      console.log(\"historyLength\", historyLength)\n    return (\n      <section className=\"component-slider\">\n\n        <button disabled={!this.props.enabled || currentTime <= 0} onClick={() => onCurrentTimeChange(currentTime - 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-back`}/>\n          </svg>\n        </button>\n\n        <section className=\"wrapper\">\n          <input\n            ref={this.slider}\n            type=\"range\"\n            min={0}\n            max={historyLength}\n            value={currentTime}\n            disabled={!this.props.enabled}\n            onChange={() => onCurrentTimeChange(this.getSliderValue())}\n          />\n        </section>\n\n        <button disabled={!this.props.enabled || currentTime >= historyLength} onClick={() => onCurrentTimeChange(currentTime + 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-forward`}/>\n          </svg>\n        </button>\n\n      </section>\n    );\n  }\n\n  // HELPERS ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  getSliderValue(): number {\n    return this.slider.current ? parseInt(this.slider.current.value, 10) : 0;\n  }\n\n}\n","class SatVisAssertionError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"SatVisAssertionError\";\n    }\n  }\n\nexport function assert(condition, message=\"\") {\n    if (!condition)\n        throw new SatVisAssertionError('Assertion failed: ' + (message || ''));\n};","import * as React from 'react';\nimport { DataSet, Network, IdType, Node, Edge } from 'vis'\n\nimport './Graph.css'\nimport { assert } from '../model/util';\n\nimport { Dag } from '../model/dag';\nimport SatNode from '../model/sat-node';\n\nconst styleTemplates = require('../resources/styleTemplates');\n\ntype Props = {\n    tree: any,\n    onNodeSelectionChange: (selection: number[]) => void,\n    nodeSelection: number[],\n    currentTime: number,\n    layout: string,\n    PobLemmasMap: any,\n};\n\ntype State = {\n    metaPressed: boolean,\n}\n\nexport default class Graph extends React.Component<Props, {}> {\n\n    state: State = {\n        metaPressed: false,\n    }\n\n    markers = new Set<number>();\n    network: Network | null = null;\n    networkNodes = new DataSet<Node>([]);\n    networkEdges = new DataSet<Edge>([]);\n    graphContainer = React.createRef<HTMLDivElement>();\n    dragStartEvent: any = null;\n    cachedChangeNodesEvent?: Set<number> = undefined;\n    componentDidMount() {\n        this.generateNetwork();\n        this.updateNetwork(false, this.props.layout);\n        this.network!.fit();\n    }\n\n    componentWillUnmount() {\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        this.updateNetwork(false, this.props.layout);\n    }\n\n    render() {\n        return (\n            <section className= \"component-graph\" ref = { this.graphContainer } >\n                <canvas/>\n                </section>\n    );\n    }\n\n\n    // DISPLAY NETWORK ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    generateNetwork() {\n        console.log(\"I am Graph. I receive:\", this.props)\n        assert(this.graphContainer.current);\n        assert(!this.network); // should only be called once\n\n        this.network = new Network(this.graphContainer.current!, {\n            nodes: this.networkNodes,\n            edges: this.networkEdges\n        }, {\n            physics: false,\n            interaction: {\n                multiselect: false\n            },layout: {\n                hierarchical: {\n                    direction: 'UD',\n                    sortMethod: 'directed',\n                },\n            }\n\n        });\n\n        this.network.on('click', async (clickEvent) => {\n            if (clickEvent.nodes.length > 0) {\n\n                assert(clickEvent.nodes.length === 1);\n                const clickedNodeId = clickEvent.nodes[0];\n                console.log(\"clickedNodeId\", this.props.tree[clickedNodeId])\n                this.props.onNodeSelectionChange(clickEvent.nodes);\n            } else {\n                this.props.onNodeSelectionChange([]);\n            }\n        });\n\n    }\n\n\n    // updates the network displayed by Vis.js\n    updateNetwork(onlyUpdateStyles: boolean, layout: string) {\n        if(layout==\"SatVis\"){\n            this.visLayout(this.props.tree);\n        }else if(layout==\"PobVis\"){\n            const PobVisTree =  this.PobVisLayout()\n            this.visLayout(PobVisTree);\n        }\n    }\n\n    PobVisLayout(): any{\n        let treeCloned = JSON.parse(JSON.stringify(this.props.tree)); \n        let find_related_nodes = this.props.nodeSelection.length>0\n        let currentNodeExprID = -100\n        if(find_related_nodes){\n            currentNodeExprID = treeCloned[this.props.nodeSelection[0]].exprID\n        }\n        console.log(\"currentNodeExprID:\", currentNodeExprID)\n        const visNodes = new Array<Node>();\n        const visEdges = new Array<Edge>();\n        let edgeId = 0\n\n        for (const nodeID in treeCloned){\n            let node = treeCloned[nodeID]\n            let visNode;\n            if(node.event_type!=\"EType.EXP_POB\"){\n                node.to_be_vis = false\n                continue\n            }\n\n            let parent = treeCloned[node.parent]\n            let siblings = parent.children\n            let same_as_sibl = false\n            let identical_sibl\n            for(const siblID of siblings){\n\n                const sibl = treeCloned[siblID]\n                if(sibl.nodeID!=node.nodeID && sibl.exprID == node.exprID){\n                    same_as_sibl = true\n                    identical_sibl = sibl\n                    break\n                }\n\n            }\n            if(same_as_sibl){\n                // I will disappear\n                node.to_be_vis = false\n\n                // point all my children to my sibling\n                for(const childID of node.children){\n                    // console.log(\"b4\", treeCloned[childID].parent)\n                    treeCloned[childID].parent = identical_sibl.nodeID\n                    // console.log(\"after\", treeCloned[childID].parent)\n                    identical_sibl.children.push(childID)\n                }\n                //change my parent's children\n                let new_children = new Array<number>();\n                for (const childID of siblings){\n                    if(childID != node.nodeID){\n                        new_children.push(childID)\n                    }\n                }\n                parent.children = new_children\n            }\n        }\n\n        return treeCloned\n    }\n\n\n    visLayout(ATree){\n        let find_related_nodes = this.props.nodeSelection.length>0\n        let currentNodeExprID = -100\n        if(find_related_nodes){\n            currentNodeExprID = ATree[this.props.nodeSelection[0]].exprID\n        }\n        console.log(\"currentNodeExprID:\", currentNodeExprID)\n        const visNodes = new Array<Node>();\n        const visEdges = new Array<Edge>();\n        let edgeId = 0\n\n\n        for (const nodeID in ATree){\n            let node = ATree[nodeID]\n            if(!node.to_be_vis) continue\n            let visNode;\n            //Prioritize related nodes\n            if (node.exprID == currentNodeExprID){\n                visNode = this.toVisNode(node, \"sameExprID\")\n            }else{\n                if(node.nodeID > this.props.currentTime){\n                    visNode = this.toVisNode(node, \"activated\");\n                }\n                else{\n                    visNode = this.toVisNode(node, \"passive\");\n                }\n            }\n\n            visNodes.push(visNode);\n            const visEdge = this.toVisEdge(edgeId, node.parent, node.nodeID, false);\n            visEdges.push(visEdge);\n            edgeId++;\n        }\n\n\n        this.networkNodes.clear();\n        this.networkNodes.add(visNodes);\n        this.networkEdges.clear();\n        this.networkEdges.add(visEdges);\n    }\n\n    toVisNode(node: any, style: string ): any {\n        const styleData = styleTemplates[style];\n        const isMarked = this.props.nodeSelection.includes(node.nodeID);\n        return {\n            id: node.nodeID,\n            labelHighlightBold: false,\n            shape: \"box\",\n            color : {\n                border : isMarked ? styleData.markedStyle.border : styleData.defaultStyle.border,\n                background : isMarked ? styleData.markedStyle.background : styleData.defaultStyle.background,\n                highlight : {\n                    border : styleData.highlightStyle.border,\n                    background : styleData.highlightStyle.background\n                }\n            },\n        };\n\n    }\n\n    toVisEdge(edgeId: number, parentNodeId: number, nodeID: number, hidden: boolean) {\n        return {\n            id: edgeId,\n            arrows: \"to\",\n            color: {\n                color: \"#dddddd\",\n                highlight: \"#f8cfc1\",\n            },\n            from: parentNodeId,\n            to: nodeID,\n            smooth: false,\n            hidden: hidden\n        }\n    }\n\n}\n","import * as React from 'react';\n\nimport { Dag } from '../model/dag';\nimport Slider from './Slider';\nimport Graph from './Graph';\nimport ReactModal from 'react-modal';\nReactModal.setAppElement('#root');\n\ntype Props = {\n    mode: \"proof\" | \"saturation\" | \"iterative\",\n    tree: any,\n    onNodeSelectionChange: (selection: number[]) => void,\n    nodeSelection: number[],\n    historyLength: number,\n    currentTime: number,\n    onCurrentTimeChange: (newState: number) => void,\n    layout: string,\n    PobLemmasMap: any,\n};\nexport default class Main extends React.Component<Props, {}> {\n\n    // TODO: remove this, after supporting button clicks in Aside while the modal is active\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n                <main>\n                <Graph\n            tree= { this.props.tree }\n            onNodeSelectionChange={this.props.onNodeSelectionChange}\n            nodeSelection={this.props.nodeSelection}\n            currentTime = {this.props.currentTime}\n            layout = {this.props.layout}\n            PobLemmasMap = {this.props.PobLemmasMap}\n                />\n                <Slider\n            historyLength={this.props.historyLength}\n            currentTime={this.props.currentTime}\n            onCurrentTimeChange={this.props.onCurrentTimeChange}\n            enabled={true}\n                />\n                </main>\n        );\n    }\n\n}\n","import * as React from 'react';\n\nimport './NodeDetails.css';\nimport Sortable from 'react-sortablejs';\nimport { Clause } from '../model/unit';\nimport { Literal } from '../model/literal';\nimport SatNode from '../model/sat-node';\n\ntype Props = {\n    node: any,\n    PobLemmasMap: {},\n    ExprMap: {},\n    layout: string,\n};\n\nexport default class NodeDetails extends React.Component<Props, {}> {\n\n    keep = false; // hack to skip each second event generated by Sortable\n\n    render() {\n        let additional_info =\"type:\" + this.props.node.event_type + \" level:\" + this.props.node.level\n        let lemma_list = new Array();\n        if(this.props.node.event_type == \"EType.EXP_POB\"){\n            lemma_list.push(<h2 key =\"lemma-title\"> Lemmas summerization </h2>)\n            if(this.props.node.exprID in this.props.PobLemmasMap){\n                let lemmas = this.props.PobLemmasMap[this.props.node.exprID]\n                for (const lemma of lemmas){\n                    lemma_list.push(<h2 key={\"lemma-header-\"+ lemma[0]}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h2>)\n                    lemma_list.push(<pre key={\"lemma-expr-\"+lemma[0]}>{this.props.ExprMap[lemma[0]]}</pre>)\n                }\n            }\n        }\n\n        return (\n                <section className= { 'component-node-details details'} >\n                <article>\n                <h2>Node <strong>{this.props.node.nodeID}, </strong>Expr < strong > { this.props.node.exprID } </strong>, Parent <strong> {this.props.node.pobID}  </strong></h2 >\n                <h3>{additional_info}</h3>\n                <pre>{this.props.node.expr}</pre>\n                </article>\n\n                <article>\n                {lemma_list}\n            </article>\n                </section>\n        );\n    }\n\n}\n","import * as React from 'react';\n\nimport GraphMenu from './GraphMenu';\nimport NodeCard from './NodeCard';\nimport './NodeMenu.css';\nimport NodeDetails from './NodeDetails';\nimport { Dag } from '../model/dag';\nimport { Literal } from '../model/literal';\nimport { assert } from '../model/util';\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    mode: \"proof\" | \"saturation\" | \"iterative\",\n    tree: any | null,\n    nodeSelection: number[],\n    onUpdateNodeSelection: (selection: number[]) => void,\n    onPoke: () => void,\n    SatVisLayout: () => void,\n    PobVisLayout: () => void,\n    PobLemmasMap: {},\n    ExprMap: {},\n    layout: string,\n};\nexport default class Aside extends React.Component<Props, {}> {\n\n    render() {\n        let nodeDetails;\n        let refresh_button;\n        console.log(this.props.mode)\n        if (this.props.mode === \"iterative\") {\n            refresh_button =\n                <button\n                    title=\"Refresh\"\n                    onClick = { this.props.onPoke }\n                >\n                    <svg viewBox=\"0 0 24 24\" className = \"icon big\" >\n                        <use xlinkHref={ `${icons}#graph-undo` } />\n                        </svg>\n                </button>\n        }\n\n        if (this.props.nodeSelection.length === 1) {\n            let node = this.props.tree[this.props.nodeSelection[0]]\n            // const node = this.props.tree[this.props.nodeSelection[0]];\n            nodeDetails =\n                <NodeDetails\n                    node={ node }\n                    PobLemmasMap = { this.props.PobLemmasMap }\n                    ExprMap = { this.props.ExprMap }\n                    layout = { this.props.layout }\n                />;\n        } else {\n            nodeDetails =\n                <section className={ 'component-node-details overview' }>\n                    <small id=\"nodeInfo\" > <strong>{`${this.props.nodeSelection.length} nodes`\n                    } </strong> selected</small >\n                </section>\n        }\n        return(\n            <aside>\n                <article>\n                    <section className=\"component-node-menu\" >\n                        { refresh_button }\n                        < button\n                        title = \"SatVis\"\n                        onClick = { this.props.SatVisLayout }\n                        >\n                        <svg viewBox=\"0 0 24 24\" className = \"icon big\" >\n                            <use xlinkHref={ `${icons}#node-parents` } />\n                        </svg>\n                </button>\n\n                <button\n                    title = \"PobVis\"\n                    onClick = { this.props.PobVisLayout }\n                >\n                    <svg viewBox=\"0 0 24 24\" className = \"icon big\" >\n                        <use xlinkHref={ `${icons}#node-children` } />\n                    </svg>\n                </button>\n\n                    </section>\n                </article>\n                { nodeDetails }\n            </aside>\n        );\n    }\n\n}\n","import * as React from 'react';\nimport { Component } from 'react';\n\nimport Main from './Main';\nimport Aside from './Aside';\nimport { Dag, ParsedLine } from '../model/dag';\nimport SatNode from '../model/sat-node';\nimport './App.css';\nimport { assert } from '../model/util';\nimport { filterNonParents, filterNonConsequences, mergePreprocessing, passiveDagForSelection } from '../model/transformations';\nimport { findCommonConsequences } from '../model/find-node';\nimport { VizWrapper } from '../model/viz-wrapper';\nimport { Clause } from '../model/unit';\nimport { Literal } from '../model/literal';\nimport { computeClauseRepresentation, computeParentLiterals } from '../model/clause-orientation';\n\ntype Props = {\n    problem: string,\n    spacerUserOptions: string,\n    mode: \"proof\" | \"saturation\" | \"iterative\",\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean,\n    orientClauses: boolean,\n};\n\n/* Invariant: the state is always in one of the following phases\n *    \"loaded\": A dag is loaded. Clause selection is not possible. dags, nodeSelection and currentTime hold meaningful values.\n *    \"loaded selected\": Same as \"loaded\", but clause selection is possible.\n *    \"waiting\": Waiting for answer from Vampire server. message holds a meaningful value.\n *    \"layouting\": Layouting a dag. message holds a meaningful value.\n *    \"error\": Some error occured. message holds a meaningful value.\n */\ntype State = {\n    state: \"loaded\" | \"loaded select\" | \"waiting\" | \"layouting\" | \"error\",\n    trees: any[],\n    message: string,\n    nodeSelection: number[],\n    currentTime: number,\n    layout: string,\n    PobLemmasMap: {},\n    ExprMap: {}\n}\n\nclass App extends Component<Props, State> {\n\n    state: State = {\n        state: \"waiting\",\n        trees: [],\n        message: \"\",\n        nodeSelection: [],\n        currentTime: 0,\n        layout: \"SatVis\",\n        PobLemmasMap: {},\n        ExprMap: {},\n    }\n\n    render() {\n        const {\n            state,\n            trees,\n            message,\n            nodeSelection,\n            currentTime,\n            layout,\n            PobLemmasMap,\n            ExprMap,\n        } = this.state;\n        let tree;\n        let main;\n        if (state === \"loaded\") {\n            assert(trees.length > 0);\n            tree = trees[trees.length - 1];\n            const hL = Object.keys(tree).length\n            main = (\n                    <Main\n                mode = { this.props.mode }\n                tree = { tree }\n                onNodeSelectionChange = { this.updateNodeSelection.bind(this) }\n                nodeSelection = { nodeSelection }\n                historyLength = { hL }\n                currentTime = { currentTime }\n                onCurrentTimeChange = { this.updateCurrentTime.bind(this) }\n                layout = { layout }\n                PobLemmasMap = { PobLemmasMap }\n                    />\n            );\n        } else {\n            main = (\n                    <main>\n                    <section className= \"slider-placeholder\" />\n                    </main>\n            );\n        }\n        return (\n                <div className= \"app\" >\n                { main }\n\n                < Aside\n            mode = { this.props.mode }\n            tree = { tree }\n            nodeSelection = { nodeSelection }\n            onUpdateNodeSelection = { this.updateNodeSelection.bind(this) }\n            onPoke = {this.poke.bind(this)}\n            SatVisLayout = { this.setSatVisLayout.bind(this) }\n            PobVisLayout = { this.setPobVisLayout.bind(this) }\n            PobLemmasMap = { PobLemmasMap }\n            ExprMap = { ExprMap }\n            layout = { layout }\n                />\n                </div>\n        );\n\n    }\n\n    async componentDidMount() {\n\n        // call Vampire on given input problem\n        await this.runVampire(this.props.problem, this.props.spacerUserOptions, this.props.mode);\n\n    }\n\n    async poke() {\n        console.log(\"poking...\")\n        this.setState({\n            state: \"waiting\",\n            message: \"Waiting for Vampire...\",\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/poke', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json)\n            if (json.status === \"success\") {\n                // await VizWrapper.layoutDag(dag, true);\n                let tree = json.nodes_list\n                const state = \"loaded\";\n                const PobLemmasMap = this.buildPobLemmasMap(tree)\n                const ExprMap = this.buildExprMap(tree)\n                this.setState({\n                    trees: [tree],\n                    message: \"blah\",\n                    state: state,\n                    PobLemmasMap: PobLemmasMap,\n                    ExprMap: ExprMap,\n                });\n                console.log(\"state is set\")\n            } else {\n                assert(json.status === \"error\");\n                const errorMessage = json.message;\n                assert(errorMessage !== undefined && errorMessage !== null);\n                this.setState({\n                    state: \"error\",\n                    message: errorMessage,\n                });\n            }\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                state: \"error\",\n                message: `Error: ${error[\"message\"]}`,\n            });\n        }\n    }\n\n    async runVampire(problem: string, spacerUserOptions: string, mode: \"proof\" | \"saturation\" | \"iterative\") {\n        this.setState({\n            state: \"waiting\",\n            message: \"Waiting for Vampire...\",\n        });\n\n        const fetchedJSON = await fetch(mode === \"iterative\" ? 'http://localhost:5000/spacer/startiterative' : 'http://localhost:5000/spacer/start', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                file: problem,\n                spacerUserOptions: spacerUserOptions\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json)\n            if (json.status === \"success\") {\n                // await VizWrapper.layoutDag(dag, true);\n                let tree = json.nodes_list\n                const state = (mode == \"iterative\" && json.spacerState === \"running\") ? \"loaded select\" : \"loaded\";\n                const PobLemmasMap = this.buildPobLemmasMap(tree)\n                const ExprMap = this.buildExprMap(tree)\n                this.setState({\n                    trees: [tree],\n                    message: \"blah\",\n                    state: state,\n                    PobLemmasMap: PobLemmasMap,\n                    ExprMap: ExprMap,\n                });\n            } else {\n                assert(json.status === \"error\");\n                const errorMessage = json.message;\n                assert(errorMessage !== undefined && errorMessage !== null);\n                this.setState({\n                    state: \"error\",\n                    message: errorMessage,\n                });\n            }\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                state: \"error\",\n                message: `Error: ${error[\"message\"]}`,\n            });\n        }\n    }\n\n\n    //BUILD POBLEMMASMAP////////////////////\n    buildPobLemmasMap(tree: any): any{\n        // construct exprID->expr map\n        let ExprMap = new Map<number, string>();\n        for (const nodeID in tree) {\n            const node = tree[nodeID]\n            ExprMap[node.exprID] = node.expr\n        }\n\n        // construct PobExprID->a list of lemmas\n        let PobLemmasMap = {}\n        for (const nodeID in tree) {\n            let node = tree[nodeID]\n            if (node.event_type != \"EType.ADD_LEM\") {\n                continue\n            }\n            const lemmaExprID = node.exprID\n            const level = node.level\n            const pobID = node.pobID\n            if (!(pobID in PobLemmasMap)) {\n                PobLemmasMap[pobID] = new Array<{}>();\n            }\n\n            //traverse the list, if lemmaExprID is already in the list, update its min max\n            let existPrevLemma = false\n            for (const lemma of PobLemmasMap[pobID]) {\n                if (lemma[0] == lemmaExprID) {\n                    existPrevLemma = true\n                    let prev_min = lemma[1]\n                    let prev_max = lemma[2]\n\n                    if (level > prev_max || level == \"oo\") {\n                        lemma[2] = level\n                    }\n                    if (level < prev_min) {\n                        lemma[1] = level\n                    }\n                    break\n                }\n            }\n\n            if (!existPrevLemma) {\n                PobLemmasMap[node.pobID].push([lemmaExprID, level, level])\n            }\n        }\n        return PobLemmasMap\n    }\n\n    //BUILD EXPR MAP////////////////////////\n    // construct exprID->expr map\n    buildExprMap(tree: any): any{\n        let ExprMap = new Map<number, string>();\n        for (const nodeID in tree) {\n            const node = tree[nodeID]\n            ExprMap[node.exprID] = node.expr\n        }\n        return ExprMap\n\n    }\n\n\n\n    //NETWORK///////////////////////////////\n\n    updateNodeSelection(nodeSelection: number[]) {\n        this.setState({ nodeSelection: nodeSelection });\n    }\n\n\n    updateCurrentTime(currentTime: number) {\n        const trees = this.state.trees\n        assert(trees.length > 0);\n        const tree = trees[trees.length - 1];\n\n        console.log(currentTime)\n        // const nodesInActiveDag = dag.computeNodesInActiveDag(currentTime);\n        // const nodeSelection = new Array<number>();\n        // for (const nodeId of this.state.nodeSelection) {\n        //     if (nodesInActiveDag.has(nodeId)) {\n        //         nodeSelection.push(nodeId);\n        //     }\n        // }\n        this.setState({\n            // nodeSelection: nodeSelection,\n            currentTime: currentTime\n        });\n    }\n\n    setPobVisLayout(){\n        this.setState({ layout: \"PobVis\" })\n    }\n    setSatVisLayout(){\n        this.setState({ layout: \"SatVis\" })\n    }\n}\n\nexport default App;\n","import * as React from 'react';\nimport { NavigationBar } from \"./NavigationBar\";\nimport App from \"./App\";\nimport './AppWrapper.css';\n\ntype Props = {\n\tname: string,\n\tproblem: string,\n\tspacerUserOptions: string,\n\tmode: \"proof\" | \"saturation\" | \"iterative\"\n\thideBracketsAssoc: boolean,\n\tnonStrictForNegatedStrictInequalities: boolean, \n\torientClauses: boolean,\n  };\n  \n  export class AppWrapper extends React.Component<Props, {}> {\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div id=\"appWrapper\">\n\t\t\t\t<NavigationBar \n\t\t\t\t\tname={this.props.name}\n\t\t\t\t/>\n\t\t\t\t<App \n\t\t\t\t\tproblem={this.props.problem}\n\t\t\t\t\tspacerUserOptions={this.props.spacerUserOptions}\n\t\t\t\t\tmode={this.props.mode}\n\t\t\t\t\thideBracketsAssoc={this.props.hideBracketsAssoc}\n\t\t\t\t\tnonStrictForNegatedStrictInequalities={this.props.nonStrictForNegatedStrictInequalities}\n\t\t\t\t\torientClauses={this.props.orientClauses}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n  }\n  \n","import * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport './Menu.css';\nimport * as Monaco from 'monaco-editor'\nimport { assert } from '../model/util';\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  problem: string,\n  problemName: string,\n    inputSyntax: 'smtlib' | 'tptp',\n\n  spacerUserOptions: string,\n  hideBracketsAssoc: boolean,\n  nonStrictForNegatedStrictInequalities: boolean\n  orientClauses: boolean,\n  onChangeProblem: (problem: string) => void,\n  onChangeProblemName: (problemName: string) => void,\n  onChangeInputSyntax: (syntax: 'smtlib' | 'tptp') => void\n  onChangeSpacerUserOptions: (spacerUserOptions: string) => void,\n  onChangeHideBracketsAssoc: (newValue: boolean) => void,\n  onChangeNonStrictForNegatedStrictInequalities: (newValue: boolean) => void,\n  onChangeOrientClauses: (newValue: boolean) => void\n}\n\nexport class Menu extends React.Component<Props, {}> {\n  private isChromeOrFirefox = navigator.userAgent.indexOf('Chrome') > -1 || navigator.userAgent.indexOf('Firefox') > -1;\n  private fileUpload = React.createRef<HTMLInputElement>();\n  monacoDiv = React.createRef<HTMLDivElement>();\n  monaco: Monaco.editor.IStandaloneCodeEditor | null = null\n\n  componentDidMount() {\n    if (!this.isChromeOrFirefox) {\n      return;\n    }\n    // generate instance of Monaco Editor\n    this.monaco = Monaco.editor.create(this.monacoDiv.current!, {\n      lineNumbers: 'off',\n      roundedSelection: false,\n      scrollBeyondLastLine: false,\n      scrollBeyondLastColumn: 0,\n      minimap: {\n        enabled: false\n      },\n      renderLineHighlight: 'none',\n      hideCursorInOverviewRuler: true,\n      links: false,\n      overviewRulerBorder: false,\n      automaticLayout: true,\n      lineDecorationsWidth: 0,\n      lineNumbersMinChars: 0,\n      wordWrap: 'wordWrapColumn'\n      // fontFamily: \"Monaco\" TODO: decide which font to use. By default, multiple fonts are loaded, which is quite slow\n    });\n    this.monaco.setValue(this.props.problem);\n    this.monaco.getModel()!.onDidChangeContent(() => {\n      this.props.onChangeProblem(this.monaco!.getModel()!.getValue());\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    assert(this.isChromeOrFirefox);\n    if (this.props.problem !== prevProps.problem) {\n      this.monaco!.setValue(this.props.problem);\n    }\n  }\n\n  render() {\n    if (!this.isChromeOrFirefox) {\n      return (\n        <section className=\"unsupported-message\">\n            <svg viewBox=\"0 0 24 24\" className=\"icon\">\n              <use xlinkHref={`${icons}#alert-triangle`}/>\n            </svg>\n            <span>Your current browser is not supported. Please use Chrome or Firefox!</span>\n        </section>\n      );\n    }\n\n    return (\n      <section className=\"component-menu\">\n        <h1>Spacer Visualization</h1>\n\n        <section className=\"editor\">\n          <div className=\"editor-spacer\">\n            <main>\n              <div className=\"headline-wrapper\">\n                <h2>Input</h2>\n                <small className=\"file-name\">{this.props.problemName}</small>\n                <button title=\"Pick a new file\" onClick={this.chooseFile.bind(this)}>\n                  <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n                    <use xlinkHref={`${icons}#graph-upload`}/>\n                  </svg>\n                </button>\n              </div>\n\n              <input\n                ref={this.fileUpload}\n                type=\"file\"\n                onChange={this.uploadEncoding.bind(this)}\n              />\n              <div ref={this.monacoDiv} className=\"monaco\"></div>\n            </main>\n\n            <aside>\n              <fieldset className=\"options-card\">\n                <h3>Z3 Options</h3>\n                <ul>\n                  <li>\n                    <label htmlFor=\"userOptions\" className=\"form-label\">Additional Spacer options</label>\n                    <input id=\"userOptions\" type=\"text\" onChange={this.changeSpacerUserOptions.bind(this)}\n                           value={this.props.spacerUserOptions}>\n                    </input>\n                  </li>\n                </ul>\n              </fieldset>\n\n            </aside>\n          </div>\n        </section>\n\n        <section className=\"run-menu\">\n          <Link to=\"/proof/\" className=\"fake-button\">Solve</Link>\n          <Link to=\"/iterative/\" className=\"fake-button\">Hit and Run</Link>\n        </section>\n      </section>\n    );\n  }\n\n  chooseFile() {\n    if (this.fileUpload.current) {\n      this.fileUpload.current.click();\n    }\n  }\n\n  uploadEncoding(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.files !== null && event.target.files.length > 0) {\n      const file = event.target.files[0];\n\n      const reader = new FileReader();\n      // callback which will be executed when readAsText is called\n      reader.onloadend = () => {\n        const text = (reader.result ? reader.result : '') as string;\n        this.props.onChangeProblem(text);\n        this.props.onChangeProblemName(file.name);\n\n        // guess inputSyntax from file extension:\n        if (file.name.endsWith('.smt') || file.name.endsWith('.smtlib') || file.name.endsWith('.smt2') || file.name.endsWith('.smtlib2')) {\n          this.props.onChangeInputSyntax('smtlib');\n        } else if (file.name.endsWith('.tptp')) {\n          this.props.onChangeInputSyntax('tptp');\n        }\n      };\n      reader.readAsText(file);\n    }\n  }\n\n  changeSpacerUserOptions(event: React.ChangeEvent<HTMLInputElement>) {\n    const newValue = event.target.value;\n    this.props.onChangeSpacerUserOptions(newValue);\n  }\n\n  changeTextArea(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    const newValue = event.target.value;\n    this.props.onChangeProblem(newValue);\n  }\n\n  changeHideBracketsAssoc(event: React.ChangeEvent<HTMLInputElement>) {\n    const newValue = event.target.checked;\n    this.props.onChangeHideBracketsAssoc(newValue);\n  }\n\n  changeNonStrictForNegatedStrictInequalities(event: React.ChangeEvent<HTMLInputElement>) {\n    const newValue = event.target.checked;\n    this.props.onChangeNonStrictForNegatedStrictInequalities(newValue);\n  }\n\n  changeInputSyntax(event: React.ChangeEvent<HTMLSelectElement>) {\n    const newValue = event.target.value as 'smtlib' | 'tptp';\n    this.props.onChangeInputSyntax(newValue);\n  }\n\n  changeOrientClauses(event: React.ChangeEvent<HTMLInputElement>) {\n    const newValue = event.target.checked;\n    this.props.onChangeOrientClauses(newValue);\n  }\n}\n","import * as React from 'react';\nimport { HashRouter as HashRouter, Route, Link } from \"react-router-dom\";\nimport { AppWrapper } from './AppWrapper'\nimport { Menu } from './Menu'\n\ntype State = {\n\tproblem: string,\n\tproblemName: string,\n\tinputSyntax: \"smtlib\" | \"tptp\",\n\tspacerUserOptions: string,\n\thideBracketsAssoc: boolean,\n\tnonStrictForNegatedStrictInequalities: boolean,\n\torientClauses: boolean\n}\n\nexport class AppRouter extends React.Component<{}, State> {\n\n\tstate: State = {\n\t\tproblem: \"\",\n\t\tproblemName: \"\",\n\t\tinputSyntax: \"smtlib\",\n\t\tspacerUserOptions: \"fp.spacer.max_level=4\",\n\t\thideBracketsAssoc: true,\n\t\tnonStrictForNegatedStrictInequalities: true,\n\t\torientClauses: true\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<HashRouter>\n\t\t\t\t<Route path=\"/\" exact render={() => \n\t\t\t\t\t<Menu \n\t\t\t\t\t\tproblem={this.state.problem}\n\t\t\t\t\t\tproblemName={this.state.problemName}\n\t\t\t\t\t\tinputSyntax={this.state.inputSyntax}\n\t\t\t\t\t\tspacerUserOptions={this.state.spacerUserOptions}\n\t\t\t\t\t\thideBracketsAssoc={this.state.hideBracketsAssoc}\n\t\t\t\t\t\tnonStrictForNegatedStrictInequalities={this.state.nonStrictForNegatedStrictInequalities}\n\t\t\t\t\t\torientClauses={this.state.orientClauses}\n\t\t\t\t\t\tonChangeProblem={this.changeProblem.bind(this)}\n\t\t\t\t\t\tonChangeProblemName={this.changeProblemName.bind(this)}\n\t\t\t\t\t\tonChangeInputSyntax={this.changeInputSyntax.bind(this)}\n\t\t\t\t\t\tonChangeSpacerUserOptions={this.changeSpacerUserOptions.bind(this)}\n\t\t\t\t\t\tonChangeHideBracketsAssoc={this.changeHideBracketsAssoc.bind(this)}\n\t\t\t\t\t\tonChangeNonStrictForNegatedStrictInequalities={this.changeNonStrictForNegatedStrictInequalities.bind(this)}\n\t\t\t\t\t\tonChangeOrientClauses={this.changeOrientClauses.bind(this)}\n\t\t\t\t\t/>\n\t\t\t\t}/>\n\t\t\t\t<Route path=\"/proof/\" render={() => \n\t\t\t\t\tthis.appComponent(\"proof\")\n\t\t\t\t}/>\n\t\t\t\t<Route path=\"/saturation/\" render={() => \n\t\t\t\t\tthis.appComponent(\"saturation\")\n\t\t\t\t}/>\n\t\t\t\t<Route path=\"/iterative/\" render={() => \n\t\t\t\t\tthis.appComponent(\"iterative\")\n\t\t\t\t}/>\n\t\t\t</HashRouter>\n\t\t);\n\t}\n\n\tappComponent(mode: \"proof\" | \"saturation\" | \"iterative\") {\n\t\tconst inputSyntax = this.state.inputSyntax === \"smtlib\" ? \"smtlib2\" : this.state.inputSyntax;\n\t\t// const spacerUserOptions = `${this.state.spacerUserOptions} --input_syntax ${inputSyntax}`;\n\n\t\tconst spacerUserOptions = `${this.state.spacerUserOptions}`;\n\t\treturn <AppWrapper\n\t\t\tname={this.state.problemName}\n\t\t\tmode={mode}\n\t\t\tproblem={this.state.problem!}\n\t\t\tspacerUserOptions={spacerUserOptions}\n\t\t\thideBracketsAssoc={this.state.hideBracketsAssoc}\n\t\t\tnonStrictForNegatedStrictInequalities={this.state.nonStrictForNegatedStrictInequalities}\n\t\t\torientClauses={this.state.orientClauses}\n\t\t/>\n\t}\n\n\tchangeProblem(problem: string) {\n\t\tthis.setState({problem: problem});\n\t}\n\tchangeProblemName(problemName: string) {\n\t\tthis.setState({problemName: problemName});\n\t}\n\tchangeSpacerUserOptions(spacerUserOptions: string) {\n\t\tthis.setState({spacerUserOptions: spacerUserOptions});\n\t}\n\tchangeHideBracketsAssoc(newValue: boolean) {\n\t\tthis.setState({hideBracketsAssoc: newValue});\n\t}\n\tchangeNonStrictForNegatedStrictInequalities(newValue: boolean) {\n\t\tthis.setState({nonStrictForNegatedStrictInequalities: newValue});\n\t}\n\tchangeInputSyntax(inputSyntax: \"smtlib\" | \"tptp\") {\n\t\tthis.setState({inputSyntax: inputSyntax});\n\t}\n\tchangeOrientClauses(newValue: boolean) {\n\t\tthis.setState({orientClauses: newValue});\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport { AppRouter } from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <AppRouter/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/all.cd5d2510.svg\";"],"sourceRoot":""}